generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String                  @id @default(uuid())   // UUID 사용
  name              String
  price             Int
  pricePer100g      Int?
  productUrl        String
  affiliateUrl      String?
  imageUrl          String?                 // 이미지 URL을 저장할 필드 추가
  productType       ProductType             @relation("ProductTypeProducts", fields: [productTypeId], references: [id])
  productTypeId     String                  // UUID 타입으로 변경
  site              ProductSite             @relation("ProductSiteProducts", fields: [siteId], references: [id])
  siteId            String                  // UUID 타입으로 변경
  nutrition100g     ProductNutrition100g?   @relation("ProductToNutrition100g", fields: [nutrition100gId], references: [id], onDelete: Cascade)
  nutrition100gId   String?                 @unique
  nutritionTotal    ProductNutritionTotal?  @relation("ProductToNutritionTotal", fields: [nutritionTotalId], references: [id], onDelete: Cascade)
  nutritionTotalId  String?                 @unique
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@index([price])
  @@index([pricePer100g])
  @@index([productTypeId])
  @@index([siteId])
}

model ProductNutrition100g {
  id               String    @id @default(uuid())  // UUID 사용
  calories         Float?
  carbohydrates    Float?
  sugars           Float?
  protein          Float?
  fat              Float?
  saturatedFat     Float?
  transFat         Float?
  cholesterol      Float?
  sodium           Float?

  product          Product? @relation("ProductToNutrition100g")
}

model ProductNutritionTotal {
  id               String    @id @default(uuid())  // UUID 사용
  calories         Float?
  carbohydrates    Float?
  sugars           Float?
  protein          Float?
  fat              Float?
  saturatedFat     Float?
  transFat         Float?
  cholesterol      Float?
  sodium           Float?

  product          Product? @relation("ProductToNutritionTotal")
}

model ProductType {
  id         String        @id @default(uuid())  // UUID 사용
  name       String
  parentId   String?                            // UUID 타입으로 변경
  parent     ProductType?  @relation("ProductTypeHierarchy", fields: [parentId], references: [id])
  children   ProductType[] @relation("ProductTypeHierarchy")
  products   Product[]     @relation("ProductTypeProducts")

  @@index([parentId])
}

model ProductSite {
  id         String     @id @default(uuid())    // UUID 사용
  name       String     @unique
  products   Product[]  @relation("ProductSiteProducts")
}